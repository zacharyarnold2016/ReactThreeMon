/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 comp_character.glb
*/

import React, { useCallback, useEffect, useRef, useState } from "react";
import { events, useFrame, useThree } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";

export function Character(props) {
  const [isTouched, setIsTouched] = useState(false);
  const [positionChanged, setPositionChanged] = useState(false);
  const { worldState } = props;
  const { camera } = useThree();
  const [speedFor, speedRev, speedSide] = [2.5, 2.5, 2.5];
  const { nodes, materials } = useGLTF("assets/comp_character.glb");
  const onKeyDown = useCallback(
    (events) => {
      setPositionChanged(!positionChanged);
      const keyCode = events.which;
      if (keyCode === 83) {
        ref.current.position.z = ref.current.position.z + speedFor;
        camera.position.z = camera.position.z + speedFor;
      } else if (keyCode === 87) {
        ref.current.position.z = ref.current.position.z - speedRev;
        camera.position.z = camera.position.z - speedRev;
      } else if (keyCode === 68) {
        ref.current.position.x = ref.current.position.x + speedSide;
        camera.position.x = camera.position.x + speedSide;
      } else if (keyCode === 65) {
        ref.current.position.x = ref.current.position.x - speedSide;
        camera.position.x = camera.position.x - speedSide;
      } else if (keyCode === 32) {
        ref.current.position.y = ref.current.position.y + 7;
        setTimeout(() => {
          ref.current.position.y = 0;
        }, 1000);
      }
      console.log(keyCode);
    },
    [events]
  );
  document.addEventListener("keydown", onKeyDown, false);
  const ref = useRef();
  useFrame(() => {
    let { x, y, z } = ref.current.position;
    if (
      x == worldState.box1.x &&
      y == worldState.box1.y &&
      z == worldState.box1.z &&
      isTouched === false
    ) {
      setIsTouched(true);
      console.log("Touched");
    }
    if (isTouched === true && ref.current.position.x !== worldState.box1.x) {
      setIsTouched(false);
      console.log("No Longer Touched");
    }
  });
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Circle.geometry}
        material={materials.Material}
        position={[0, 0, 0]}
        scale={0.3}
        ref={ref}
      >
        <meshStandardMaterial color={"blue"}/>
      </mesh>
    </group>
  );
}

useGLTF.preload("assets/comp_character.glb");
